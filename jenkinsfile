pipeline {
    agent any

    environment {
        VENV_DIR = 'venv'
        DOCKERHUB_USER = "jfodocker25"  // Remplace par ton nom d'utilisateur DockerHub
        IMAGE_NAME = "fastapi-docker-image"
        CONTAINER_NAME = "fastapi-container"
        GITHUB_REPO = "https://github.com/NoForcing/Fast_API_CI_CD.git"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('Setup') {
            steps {
                sh 'python3 -m venv ${VENV_DIR}'  // Crée un environnement virtuel
                sh './${VENV_DIR}/bin/pip install -r requirements.txt'  // Installe les dépendances
            }
        }

        stage('Test') {
            steps {
                sh './${VENV_DIR}/bin/pytest tests/'  // Exécute les tests unitaires
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME}:latest .'  // Construction de l’image Docker
                sh 'docker tag ${DOCKERHUB_USER}/${IMAGE_NAME}:latest ${DOCKERHUB_USER}/${IMAGE_NAME}:$BUILD_NUMBER'
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:$BUILD_NUMBER'
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'docker stop ${CONTAINER_NAME} || true'  // Arrête le conteneur s'il existe
                sh 'docker rm ${CONTAINER_NAME} || true'  // Supprime l'ancien conteneur
                sh 'docker run -d --name ${CONTAINER_NAME} -p 8000:8000 ${DOCKERHUB_USER}/${IMAGE_NAME}:latest'  // Déploie l'application
            }
        }
    }

    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: "UNKNOWN"
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? "green" : "red"

                def body = """  
                <html>
                    <body>
                        <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                            <h2>${jobName} - Build ${buildNumber}</h2>
                            <div style="background-color:${bannerColor}; padding:10px;">
                                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                            </div>
                            <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                        </div>
                    </body>
                </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'jeanfabriceouffoue@gmail.com',
                    from: 'jeanfabriceouffoue2002@gmail.com',
                    replyTo: 'jeanfabriceouffoue2002@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
